<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- =======================================================================================================
                                                Target file which makes VSCT compilation available for Widbey
            ======================================================================================================= -->
  <UsingTask TaskName="VSCTCompiler" AssemblyFile="C:\Program Files\Visual Studio 2005 SDK\2007.02\Prerelease\VSCT\VSCT.exe" />

  <!-- =======================================================================================================
                                                VSCT Compilation
            ======================================================================================================= -->
  <Target Name="VSCTCompile" DependsOnTargets="$(VSCTCompileDependsOn)" Condition="'$(BuildingProject)' != 'false' And '@(VSCTCompile)' != ''">
    <!--Create the list of include path to use for the VSCT compilation-->
    <!--As first add the user provided folders-->
    <CreateItem Include="@(VSCTIncludePath)" Condition="'@(VSCTIncludePath)' != ''">
      <Output TaskParameter="Include" ItemName="_InternalVSCTIncludePath" />
    </CreateItem>
    <!--Now add the internal folders-->
    <CreateItem Include="$(VsSDKIncludes)" Condition="'$(VsSDKIncludes)' != ''">
      <Output TaskParameter="Include" ItemName="_InternalVSCTIncludePath" />
    </CreateItem>
    <CreateItem Include="$(VsSDKIncludes)\office10" Condition="'$(VsSDKIncludes)' != ''">
      <Output TaskParameter="Include" ItemName="_InternalVSCTIncludePath" />
    </CreateItem>
    <VSCTCompiler 
		AdditionalIncludeDirectories="@(_InternalVSCTIncludePath)" 
		IntermediateDirectory="$(ProjectDir)obj\$(ConfigurationName)"
		NoLogo="true" 
		OutputFile="@(VSCTCompile->'%(FileName).cto')" 
		Source="@(VSCTCompile)" 
		Verbose="true" />
    <!--Record the VSCT compile CTO outputs for the Clean task.-->
    <CreateItem Include="@(VSCTCompile->'$(IntermediateOutputPath)%(FileName).cto')" Condition="Exists('@(VSCTCompile->'$(IntermediateOutputPath)%(FileName).cto')')">
      <Output TaskParameter="Include" ItemName="FileWrites" />
    </CreateItem>
  </Target>
  <!-- ======================================================================================================= -->
  
  <!-- =======================================================================================================
                                              Merging CTO resource
            ======================================================================================================= -->
  <PropertyGroup>
    <!-- The result of the ctc compilation will be used by the resource generator, so this task
         must depend on the ctc one -->
    <PrepareResourcesDependsOn>$(PrepareResourcesDependsOn);MergeCtoResource</PrepareResourcesDependsOn>
    <MergeCtoResourceDependsOn>$(MergeCtoResourceDependsOn);GenerateListOfCTO;CtcCompile;VSCTCompile;ResGen;GenerateResourceToMergeWithCTO</MergeCtoResourceDependsOn>
  </PropertyGroup>
  <!--
    Create the list of the .RESOURCES files to merge with the CTO data.
  -->
  <Target Name="GenerateResourceToMergeWithCTO" DependsOnTargets="ResGen">
    <CreateItem Include="@(ManifestResourceWithCulture);@(ManifestResourceWithNoCulture)" Condition="'%(ManifestResourceWithCulture.MergeWithCTO)'=='true' Or '%(ManifestResourceWithNoCulture.MergeWithCTO)'=='true'">
      <Output TaskParameter="Include" ItemName="_ResourcesToMergeWithCTO" />
    </CreateItem>
  </Target>
  <!--
  Create the list of the expected CTO files.
  -->
  <Target Name="GenerateListOfCTO">
    <!--Add the CTO files from the list of CTC files.-->
    <CreateItem Include="@(CtcFile->'$(IntermediateOutputPath)%(FileName).cto')" Condition="'@(CtcFile)' != ''">
      <Output TaskParameter="Include" ItemName="_GeneratedCTOFiles" />
    </CreateItem>
    <!--Add the CTO files from the list of VSCT files.-->
    <CreateItem Include="@(VSCTCompile->'$(IntermediateOutputPath)%(FileName).cto')" Condition="'@(VSCTCompile)' != ''">
      <Output TaskParameter="Include" ItemName="_GeneratedCTOFiles" />
    </CreateItem>
  </Target>
  <Target Name="MergeCtoResource" Condition="('@(CtcFile)'!='' OR '@(VSCTCompile)' != '') AND '$(BuildingProject)'!='false'" DependsOnTargets="$(MergeCtoResourceDependsOn)">
	<CtoResourceMerger DestinationResource="$(PackageResources)" CtoFile="@(_GeneratedCTOFiles)" ResourcesToMerge="@(_ResourcesToMergeWithCTO)">
      <Output TaskParameter="GeneratedResource" ItemName="MergedCtoResource" />
    </CtoResourceMerger>
  </Target>
  <ItemGroup>
    <ManifestResourceWithNoCulture Include="$(MergedCtoResource)">
      <InProject>false</InProject>
    </ManifestResourceWithNoCulture>
  </ItemGroup>
  <!-- ======================================================================================================= -->
 
</Project>