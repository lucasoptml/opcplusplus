
// In this example, we add several functions to two classes
// A and B.  Assume in this example that A and B are not 
// related.  In other words, they do not inherit from a common
// base, and cannot just inherit the same methods.  In this
// example, we use an opdefine to reduce the code duplication.

opdefine AddCode(class_name)
{
	public:		

		// Returns the class name.
		const char* GetClassName()				
		{										
			return #class_name;				
		}										
		
		// Returns the size of class_name.
		size_t GetClassSize()					
		{										
			return sizeof(class_name);			
		}										
		
	private:									
		
		// Make new and delete private so you can't  
		// dynamically allocate an instance of class_name.
		static void* operator new(size_t size)		
		{											
			return NULL;							
		}											
		
		static void operator delete(void* object)	
		{											
			
		}						
}

namespace op_define
{
	class A
	{
		AddCode(A);
	};

	class B
	{
		AddCode(B);
	};
}

/*=== notes ===*/

// Pros
// 1) We have reduced code duplication and redundancy.
// 2) We can put comments into the opdefine definition.
// 3) It actually looks readable.

// Cons
// 1) The methods added via the macros are not debuggable.
// 2) We have to add a call to every class.